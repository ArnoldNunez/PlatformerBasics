<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_moveplatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove sprite (therefore no collision box) and initialize vars
sprite_index = -1;


/// Initialize variables

dir = -1;       ///&lt; Direction -1 = left 1 = right
movespeed = 3;  ///&lt; Max horizontal move speed
hsp = 0;        ///&lt; Current horizontal speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn collision box on and off and handle collision

/// Turn on collision mask before checking for collisions
mask_index = spr_moveplatform;

/// Set movement
hsp = dir * movespeed;

/// Horizontal collision
if (place_meeting(x+hsp, y, obj_wall)) /// if next move causes collision
{
    while(!place_meeting(x+sign(hsp), y, obj_wall))
    {
        /// Move us 1 px a frame towards the collision until collision occurs
        /// Sign returns 1 or -1 depending on whether var is pos or neg
        x += sign(hsp);
    }
    hsp = 0;
    
    dir *= -1;  /// Change the direction
}
x += hsp;   /// If there is a collision it will be 0




/// One way platform code
if (instance_exists(obj_player))
{
    if (round(obj_player.y + (obj_player.sprite_height / 2)) &gt; y) ||
        (obj_player.key_down)
    {
        mask_index = -1;    /// Mask is collision spr, this sets it to default collision box
    }
    else
    {
        mask_index = spr_moveplatform;
        
        if (place_meeting(x, y - 1, obj_player))
        {
            obj_player.hsp_carry = hsp; ///&lt; Transfer movement to player
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manually draw the sprite
draw_sprite(spr_moveplatform, 0, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
